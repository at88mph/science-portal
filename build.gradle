import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'war'
    id "com.github.node-gradle.node" version "3.0.1"

    id 'com.diffplug.spotless' version '6.25.0'

    // IntelliJ IDEA plugin here to allow integration tests to appear properly in IDEs.
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'org.jetbrains.dokka' version '1.6.0'
}

node {
    version = '22.11.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:[3.1.0,)'

    implementation 'com.opencsv:opencsv:[5.1,6.0)'
    implementation 'commons-net:commons-net:3.9.0'
    implementation 'org.apache.commons:commons-configuration2:[2.11.0,3.0.0)'
    implementation 'org.opencadc:cadc-access-control-identity:[1.2.5,)'
    implementation 'org.opencadc:cadc-gms:[1.0.12,2.0)'
    implementation 'org.opencadc:cadc-log:[1.1.5,)'
    implementation 'org.opencadc:cadc-rest:[1.3.9,)'
    implementation 'org.opencadc:cadc-util:[1.6,)'
    implementation 'org.opencadc:cadc-web-token:[1.1.1,2.0.0)'

    runtimeOnly 'commons-io:commons-io:[2.17.0,3.0.0)'
    runtimeOnly 'javax.servlet.jsp.jstl:jstl-api:1.2'
    runtimeOnly 'javax.servlet:jstl:1.2'
    runtimeOnly 'jstl:jstl:[1.0,)'
    runtimeOnly 'org.apache.taglibs:taglibs-standard-impl:1.2.5'

    testImplementation 'junit:junit:[4.12,5.0)'
    testImplementation 'org.mockito:mockito-core:[4.11.0,5.0.0)'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

war {
    // Trying to fix static file caching on new build.
    eachFile {
        if (it.name.endsWith('.jsp')) {
            filter(ReplaceTokens, tokens: [version: project.version])
        }
    }

    archiveFileName = 'science-portal.war'
}

tasks.register('buildReactApp', NodeTask) {
    dependsOn 'npmInstall'
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = [
            '--mode', 'development',
            '--entry', './src/index.js',
            '-o', './src/main/webapp/dist'
    ]
}

// Copy js and json files from dev working area to distribution assembly folder
tasks.register('copyDevToDist', Copy) {
    from layout.projectDirectory.file("public/dev")
    into layout.projectDirectory.file("src/main/webapp/dist")
}

war.dependsOn('copyDevToDist')

processResources.dependsOn 'buildReactApp'
assemble.dependsOn 'copyDevToDist'

clean.delete << file('src/main/webapp/dist')

spotless {
    java {
        // Interpret all files as utf-8
        encoding 'UTF-8'
//        // Only require formatting of files that diff from main
//        ratchetFrom 'origin/main'
        // Use the default importOrder configuration
        if (false) {
            importOrder()
        }
        // Remove unused imports
        removeUnusedImports()
        // Google Java Format, Android Open Source Project style which uses 4 spaces for indentation
        palantirJavaFormat('2.50.0').formatJavadoc(true)
        // Format annotations on a single line
        formatAnnotations()
    }
}
check.dependsOn spotlessCheck

// Example in a Gradle build script
afterEvaluate {
    def spotless = getProject().getExtensions().findByName("com.diffplug.spotless")
    if (spotless != null) {
        File gitFolder = file('.git') // Relative or absolute path
        if (gitFolder.exists()) {
            spotless.ratchetFrom('origin/main')
        } else {
            spotless.ratchetFrom(null) // No ratchet if .git folder does not exist
        }
    }
}

// Create Java Code Coverage Reports
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
check.dependsOn jacocoTestReport

// Create JavaDoc
javadoc {
    destinationDir = file("${buildDir}/docs/javadoc")
}

// Create Java Documentation using Dokka for Github Markdown and HTML
tasks.dokkaGfm.configure {
    outputDirectory.set(file("${buildDir}/docs/dokka/gfm"))
    dokkaSourceSets {
        register("main") {
            sourceRoots.from(file("src/main/java"))
        }
    }
}
tasks.dokkaHtml.configure {
    outputDirectory.set(file("${buildDir}/docs/dokka/html"))
    dokkaSourceSets {
        register("main") {
            sourceRoots.from(file("src/main/java"))
        }
        configureEach {
            jdkVersion.set(11)
            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set("https://github.com/opencadc/science-portal/tree/main/src/main/java")
            }
        }
    }
}
